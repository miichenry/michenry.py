'''
This script processes miniseed files generated by SmartSolo instruments. 
It assumes that each instrument's data is stored in a directory named after its serial number, and the filenames follow a pattern like 
"453007143.11.2023.06.26.00.00.00.000.E.miniseed", where the file name starts with the instrument's serial number.

The goal is to rename both the files and the directories to reflect the station names, which can be extracted from the filenames.
The station name is derived from the last five digits of the portion of the filename before the first dot.

Steps:
1. Identify all directories in the specified data directory. These directories are assumed to be named by the instrument's serial number.
2. For each directory, extract the station name by examining one of the files inside (assumed to follow the aforementioned filename pattern).
3. Rename the files inside the directory by replacing the serial number with a formatted string that includes the network, station, and component information.
4. Rename the directory itself to use the station name instead of the serial number.

Assumptions:
- Filenames have a fixed format where the station name is embedded as the last five characters of the portion before the first dot.
- Components are labeled as ".Z.", ".N.", and ".E." in the filenames, corresponding to DPZ, DPN, and DPE respectively.
'''


import os
import glob
import pandas as pd

datadir = '/srv/beegfs/scratch/shares/cdff/DPM/test_miniseed'
network = "SS"

# Function to extract station from the filename
def extract_station_from_filename(filename):
    base = os.path.basename(filename)
    # Extract the part before the first dot and then get the last five characters
    station = base.split('.')[0][-5:]
    return station

# List all files under datadir
flist = glob.glob(os.path.join(datadir, "*"))

for oldfile in flist:

    # Extract station from the current file
    station = extract_station_from_filename(oldfile)
    #print(f"Processing station: {station} from {oldfile}")

    # Determine the component based on the file naming convention
    if ".Z." in oldfile:
        comp = "DPZ"
    elif ".N." in oldfile:
        comp = "DPN"
    elif ".E." in oldfile:
        comp = "DPE"
    else:
        continue  # Skip files that don't match Z, N, or E

    # Create the new file name
    dir_name = os.path.dirname(oldfile)
    base_name = os.path.basename(oldfile)
    new_base_name = f"{network}.{station}..{comp}.{base_name}"
    newfile = os.path.join(dir_name, new_base_name)  # Combine dir and new base name

    # Rename the file
    print(f"Renaming {oldfile} to {newfile}")
    os.rename(oldfile, newfile)
